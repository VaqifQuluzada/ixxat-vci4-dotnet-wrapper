<!--

  Main MSBUILD file
    Needs the following parameters:
      Version:          version number, e.g. 4.1.0-beta
      SourceRevisionId: git hash
      RepositoryUrl:    git repo url
      RepositoryType:   e.g. git
      RepositoryBranch: e.g. main
    Execute this with:
      msbuild -p:Version=4.1.0-beta -p:SourceRevisionId=2342340aa495a33574f48616ab58c9477a3bc34d -p:RepositoryUrl=https://github.com/HMS/Ixxat.VCI4 -p:RepositoryType=git -p:RepositoryBranch=main

-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="Build">

    <PropertyGroup>
        <Version Condition="'$(Version)' == ''">1.0.0.0</Version>
        <AssemblyVersion Condition="'$(AssemblyVersion)' == ''">$(Version.Split('-')[0])</AssemblyVersion>
        <FileVersion Condition="'$(FileVersion)' == ''">$(Version.Split('-')[0])</FileVersion>
        <Major>$([System.Text.RegularExpressions.Regex]::Match($(AssemblyVersion), `(\d+).(\d+).(\d+).*`).Groups[1].Value)</Major>
        <Minor>$([System.Text.RegularExpressions.Regex]::Match($(AssemblyVersion), `(\d+).(\d+).(\d+).*`).Groups[2].Value)</Minor>
        <Patch>$([System.Text.RegularExpressions.Regex]::Match($(AssemblyVersion), `(\d+).(\d+).(\d+).*`).Groups[3].Value)</Patch>
        <InformationalVersion Condition="'$(InformationalVersion)' == ''">$(Version)</InformationalVersion>
        <Authors Condition="'$(Authors)' == ''">HMS Networks</Authors>
        <CompanyName>HMS Technology Center Ravensburg GmbH</CompanyName>
        <Description Condition="'$(Description)' == ''">Access CAN interfaces from Ixxat/HMS Networks via .NET and VCI4-API</Description>
        <Copyright Condition="'$(Copyright)' == ''">Copyright (C) 2016-2022 HMS Technology Center Ravensburg GmbH</Copyright>
    </PropertyGroup>

    <Target Name="WriteLibVerHeader" BeforeTargets="compile_managed_components">
        <PropertyGroup>
            <LibVerContent>
// generated by buildscript
    
#ifndef _LIBVER_H_
#define _LIBVER_H_

  // macro to convert version number to text
  #define LIB_VERSION_ASTEXT2(x)     #x
  #define LIB_VERSION_ASTEXT(x) LIB_VERSION_ASTEXT2(x)

/*****************************************************************************
 * LIB version number
 ****************************************************************************/
   // Major version number
  #define LIB_A_VERSION      $(Major)
  #define LIB_A_VERSION_STR  LIB_VERSION_ASTEXT(LIB_A_VERSION)

  // Minor version number
  #define LIB_B_VERSION      $(Minor)
  #define LIB_B_VERSION_STR  LIB_VERSION_ASTEXT(LIB_B_VERSION)

  // Revision number
  #define LIB_C_VERSION      $(Patch)
  #define LIB_C_VERSION_STR  LIB_VERSION_ASTEXT(LIB_C_VERSION)
  
  // Build number
  #define LIB_D_VERSION      0
  #define LIB_D_VERSION_STR  LIB_VERSION_ASTEXT(LIB_C_VERSION)
  
  // debug/release
  //
  #ifdef _DEBUG
    #define LIB_VI_BUILDTYPE_STR   "debug"
  #else
    #define LIB_VI_BUILDTYPE_STR   "release"
  #endif

/*****************************************************************************
 * LIB version information
 ****************************************************************************/
  #define LIB_VI_COPYRIGHT_STR     "$(Copyright)"
  #define LIB_VI_COMPANY_NAME_STR  "$(CompanyName)"
  #define LIB_VI_PRODUCT_NAME_STR  "vci4net"
  #define LIB_VI_SPECIALBUILD_STR  "$(SourceRevisionId)"

  #define LIB_VI_FILE_VERS      LIB_A_VERSION, LIB_B_VERSION, LIB_C_VERSION, LIB_D_VERSION
  #define LIB_VI_FILE_VERS_STR  LIB_VERSION_ASTEXT(LIB_VI_FILE_VERS)

#endif
          </LibVerContent>
        </PropertyGroup>

        <WriteLinesToFile
          File="src/inc/libver.h"
          Overwrite="true"
          Lines="$(LibVerContent)" />
    </Target>

    <ItemGroup>
        <ContractProject Include="src\contract\Ixxat.Vci4.Contract.csproj">
        </ContractProject>
        <LoaderProject Include="src\loader\Ixxat.Vci4.csproj">
        </LoaderProject>
        <NativeProject Include="src\impl\vcinet.vcxproj">
        </NativeProject>
        <NativeProjectStrongNamed Include="\src\impl\vcinet_sn.vcxproj">
        </NativeProjectStrongNamed>
    </ItemGroup>

    <Target Name="compile_managed_components">
        <!-- restore nuget packages -->
        <Exec Command="dotnet.exe restore @(ContractProject)" />
        <Exec Command="dotnet.exe restore @(LoaderProject)" />

        <MSBuild Projects="@(ContractProject)" Targets="Rebuild" Properties="Configuration=Release" />
        <MSBuild Projects="@(LoaderProject)"   Targets="Rebuild" Properties="Configuration=Release" />
    </Target>

    <Target Name="compile_native_components" DependsOnTargets="compile_managed_components">
        <MSBuild Projects="@(NativeProject)" Targets="Rebuild" Properties="Configuration=Release;Platform=Win32;Framework=net40"/>
        <MSBuild Projects="@(NativeProject)" Targets="Rebuild" Properties="Configuration=Release;Platform=x64;Framework=net40"/>
        <MSBuild Projects="@(NativeProject)" Targets="Rebuild" Properties="Configuration=Release;Platform=Win32;Framework=netcoreapp3.1"/>
        <MSBuild Projects="@(NativeProject)" Targets="Rebuild" Properties="Configuration=Release;Platform=x64;Framework=netcoreapp3.1"/>
    </Target>

    <ItemGroup>
        <Net40Binaries      Include=".\src\impl\bin\Release\net40\vcinet*.dll" />
        <Net40Destination   Include="net40" />
        <NetCoreBinaries    Include=".\src\impl\bin\Release\netcoreapp3.1\vcinet*.dll" />
        <NetCoreDestination Include="net5.0-windows;net6.0-windows;netcoreapp3.1" />
    </ItemGroup>

    <Target Name="copy_and_sign_components" DependsOnTargets="compile_native_components">

        <!-- todo: sign native components -->
        <!-- todo: sign managed components -->

        <!-- copy native binaries -->
        <Copy SourceFiles="@(Net40Binaries)"   DestinationFolder="./bin/Release/%(Net40Destination.Identity)" />
        <ItemGroup>
             <ToCopy Include="@(NetCoreBinaries)">
               <Destination>./bin/Release/%(NetCoreDestination.Identity)</Destination>
             </ToCopy>
        </ItemGroup>
        <Copy SourceFiles="@(ToCopy)" DestinationFolder="%(Destination)" />

    </Target>

    <PropertyGroup>
        <NugetTargetDir>nuget</NugetTargetDir>
    </PropertyGroup>

    <PropertyGroup>
        <Namespace>
            <Namespace Prefix="nuget" Uri="http://schemas.microsoft.com/packaging/2011/08/nuspec.xsd" />
        </Namespace>
    </PropertyGroup>

    <ItemGroup>
        <Packagefiles Condition="'$(AssemblyKeyFileAttribute)' == ''" Include="Ixxat.Vci4.nuspec" />
        <Packagefiles Condition="'$(AssemblyKeyFileAttribute)' != ''" Include="Ixxat.Vci4.StrongName.nuspec" />
        <Packagefiles Include="Ixxat.Vci4.Manual.nuspec" />
    </ItemGroup>

    <Target Name="buildnugetpackage" Inputs="@(Packagefiles)" Outputs="%(Identity).Dummy">
        <!-- poke version number -->
        <XmlPoke
            XmlInputPath="$(NugetTargetDir)/%(Packagefiles.Identity)"
            Value="$(Version)"
            Query="/nuget:package/nuget:metadata/nuget:version"
            Namespaces="$(Namespace)"/>

        <!-- poke git commit hash -->
        <XmlPoke
            XmlInputPath="$(NugetTargetDir)/%(Packagefiles.Identity)"
            Value="$(SourceRevisionId)"
            Query="/nuget:package/nuget:metadata/nuget:repository/@commit"
            Namespaces="$(Namespace)"/>

        <!-- pack via nuget -->
        <Exec WorkingDirectory="$(NugetTargetDir)" Command="c:\ut\nuget\6.3.0\nuget.exe pack @(Packagefiles)" />
    </Target>

    <Target Name="createnugetpackages">

        <!-- delete any .nupkg files -->
        <Delete Files="$(NugetTargetDir)\*.nupkg" />

        <CallTarget Targets="copy_and_sign_components" />
        <CallTarget Targets="buildnugetpackage" />
    
    </Target>

    <Target Name="Build" DependsOnTargets="createnugetpackages">
    </Target>
</Project>